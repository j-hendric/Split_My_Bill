@page "/"
@using System.Text.Json
@using static SplitMyBill.Pages.Historic
@inject HttpClient Http
@inject ILocalStorageService _localstorage;

<PageTitle>Home</PageTitle>

<tbody>
    <tr>
        <td>Name</td>
        <td>Order Cost</td>
        <td></td>
    </tr>
    @for(int i=0; i< orders.Count(); i++)
    {  
        var order = orders[i];
        int b = i;
        <tr>
            <td>
                <input @bind="@order.name"/>
            </td>
            <td>
                $<InputNumber TValue="double" @bind-Value="order.drinkCost"/>
            </td>
            <td>
                <input type="button" class="btn btn-danger btn-sm"  value="X" @onclick="() => Delete(b)"/>
            </td>
        </tr>
    }
</tbody>

<br>
<button class="btn btn-primary" @onclick="AddPerson">Add Person</button>
<button class="btn btn-primary" @onclick="CalculatePayer">Calculate Payer</button>

<br>
<br>
<h5>And the lucky winner is... @luckyWinner!</h5>

@code {
    private string luckyWinner = "";
    public List<WorkerOrder> orders = new List<WorkerOrder>
    {
        new WorkerOrder { name = "Bob", drinkCost = 0.0 },
        new WorkerOrder { name = "Jeremy", drinkCost = 0.0 },
        new WorkerOrder { name = "Other Worker", drinkCost = 0.0 },
        new WorkerOrder { name = "Someone Else", drinkCost = 0.0 },
        new WorkerOrder { name = "That One Lady", drinkCost = 0.0 },
        new WorkerOrder { name = "No Name", drinkCost = 0.0 }
    };

    private void AddPerson()
    {
        orders.Add(new WorkerOrder { name = "", drinkCost= 0.0});
    }

    private async Task CalculatePayer()
    {
        Random r = new Random();
        double rand = r.NextDouble();
        double cummulative = 0.0;
        double totalCost = CalculateTotal();
        luckyWinner = "";
        var stringData = await _localstorage.GetItemAsStringAsync("purchases");
        var data = stringData != null ? JsonSerializer.Deserialize<List<Purchase>>(stringData) : new List<Purchase>();

        for (int i = 0; i < orders.Count; i++)
        {
            var indivPercent = (orders[i].drinkCost)/totalCost;
            cummulative += indivPercent;
            if (rand < cummulative && luckyWinner == "")
            {
                luckyWinner = orders[i].name;
                Console.WriteLine(data.Count());
                var histRecord = data.FirstOrDefault(x => x.Name == luckyWinner);
                if(histRecord != null)
                {
                    histRecord.AmountPaid += totalCost;
                    histRecord.CoffeeCosts += orders[i].drinkCost;
                } else {
                    var firstPurchase = new Purchase() { Name = luckyWinner, AmountPaid = totalCost, CoffeeCosts = orders[i].drinkCost };
                    data.Add(firstPurchase);
                    Console.WriteLine(firstPurchase.Name);
                }
                
            } else
            {   var histRecord = data.FirstOrDefault(x => x.Name == orders[i].name);
                if(histRecord != null)
                {
                    histRecord.CoffeeCosts += orders[i].drinkCost;
                } else {
                    var firstPurchase = new Purchase() { Name = orders[i].name, AmountPaid = 0, CoffeeCosts = orders[i].drinkCost };
                    data.Add(firstPurchase);
                    Console.WriteLine(firstPurchase.Name);
                }
            }
        }
        Console.WriteLine(data.Count());
        Console.WriteLine("Gonna set item as string async");
        await _localstorage.SetItemAsStringAsync("purchases", JsonSerializer.Serialize(data));
        Console.WriteLine("Wowwee we just set item as string async");
    }

    private double CalculateTotal()
    {
        double total = 0;
        foreach(var order in orders)
        {
            total += order.drinkCost;
        }
        return total;
    }

    private void Delete(int indx)
    {
        orders.RemoveAt(indx);
    }

    public class WorkerOrder
    {
        public string name { get; set; }
        public double drinkCost { get; set; }
    }

}
